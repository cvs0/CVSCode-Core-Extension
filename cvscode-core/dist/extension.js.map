{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCtBA,eACA,QACA,SAEA,oBAAyBQ,GACrBC,QAAQC,IAAI,iEAEZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,2BAA2B,KACxEF,EAAOG,OAAOC,uBAAuB,iCAAiC,IAItEC,EAA0BL,EAAOC,SAASC,gBAAgB,8BAA8BI,UAExF,MAAMC,QAAuBP,EAAOG,OAAOK,aAAa,CACpDC,OAAQ,0CACRC,YAAa,iBAGjB,IAAKH,EACD,OAIJ,MAAMI,EAAkBX,EAAOY,UAAUC,mBAAmB,GAC5D,IAAKF,EAED,YADAX,EAAOG,OAAOW,iBAAiB,8BAKnC,MAAMC,EAAcC,EAAKC,KAAKN,EAAgBO,IAAIC,OAAQZ,GAE1D,GAAIa,EAAGC,WAAWN,GAEd,YADAf,EAAOG,OAAOW,iBAAiB,kBAAkBP,sBAIrDa,EAAGE,UAAUP,GAGb,MAAMQ,EAAc,CAChBC,KAAMjB,EACNkB,cAAezB,EAAOG,OAAOK,aAAa,CAAEC,OAAQ,gBAAiBC,YAAa,UAClFgB,kBAAmB1B,EAAOG,OAAOK,aAAa,CAAEC,OAAQ,oBAAqBC,YAAa,4BAIxFiB,EAAkBX,EAAKC,KAAKF,EAAa,gBAC/CK,EAAGQ,cAAcD,EAAiBE,KAAKC,UAAUP,EAAa,KAAM,IAGpE,MAAMQ,EAAef,EAAKC,KAAKF,EAAa,OAC5CK,EAAGE,UAAUS,GAEb,MAAMC,EAAkBhB,EAAKC,KAAKc,EAAc,YAChDX,EAAGQ,cAAcI,EAAiB,IAElChC,EAAOG,OAAOC,uBAAuB,6CAA6CW,IAAc,IAGpGnB,EAAQqC,cAAcC,KAAKnC,EAAYM,EAC3C,EAEA,wBAA8B,C","sources":["webpack://cvscode-core/external commonjs \"vscode\"","webpack://cvscode-core/external node-commonjs \"fs\"","webpack://cvscode-core/external node-commonjs \"path\"","webpack://cvscode-core/webpack/bootstrap","webpack://cvscode-core/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('Congratulations, your extension \"cvscode-core\" is now active!');\n\n    let disposable = vscode.commands.registerCommand('cvscode-core.helloWorld', () => {\n        vscode.window.showInformationMessage('Hello World from cvscode-core!');\n    });\n\n    // Register the \"createProject\" command\n    let createProjectDisposable = vscode.commands.registerCommand('cvscode-core.createProject', async () => {\n        // Prompt the user for project details\n        const projectDetails = await vscode.window.showInputBox({\n            prompt: 'Enter project name (e.g., my-extension)',\n            placeHolder: 'my-extension',\n        });\n\n        if (!projectDetails) {\n            return; // User canceled the input\n        }\n\n        // Get the current workspace folder\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            vscode.window.showErrorMessage('No workspace folder found.');\n            return;\n        }\n\n        // Create the project directory\n        const projectPath = path.join(workspaceFolder.uri.fsPath, projectDetails);\n\n        if (fs.existsSync(projectPath)) {\n            vscode.window.showErrorMessage(`The directory \"${projectDetails}\" already exists.`);\n            return;\n        }\n\n        fs.mkdirSync(projectPath);\n\n        // Prompt the user for more project details\n        const packageJson = {\n            name: projectDetails,\n            version: await vscode.window.showInputBox({ prompt: 'Enter version', placeHolder: '0.1.0' }),\n            description: await vscode.window.showInputBox({ prompt: 'Enter description', placeHolder: 'A new VSCode extension' }),\n        };\n\n        // Create package.json with user-defined details\n        const packageJsonPath = path.join(projectPath, 'package.json');\n        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n        // Create the \"src\" directory and a \"main.cvs\" file\n        const srcDirectory = path.join(projectPath, 'src');\n        fs.mkdirSync(srcDirectory);\n\n        const mainCvsFilePath = path.join(srcDirectory, 'main.cvs');\n        fs.writeFileSync(mainCvsFilePath, '');\n\n        vscode.window.showInformationMessage(`Created a new VSCode extension project at ${projectPath}`);\n    });\n\n    context.subscriptions.push(disposable, createProjectDisposable);\n}\n\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","createProjectDisposable","async","projectDetails","showInputBox","prompt","placeHolder","workspaceFolder","workspace","workspaceFolders","showErrorMessage","projectPath","path","join","uri","fsPath","fs","existsSync","mkdirSync","packageJson","name","version","description","packageJsonPath","writeFileSync","JSON","stringify","srcDirectory","mainCvsFilePath","subscriptions","push"],"sourceRoot":""}