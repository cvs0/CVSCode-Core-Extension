(()=>{"use strict";var e={496:e=>{e.exports=require("vscode")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")}},o={};function r(n){var t=o[n];if(void 0!==t)return t.exports;var s=o[n]={exports:{}};return e[n](s,s.exports,r),s.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const o=r(496),t=r(17),s=r(147);e.activate=function(e){console.log('Congratulations, your extension "cvscode-core" is now active!');let r=o.commands.registerCommand("cvscode-core.helloWorld",(()=>{o.window.showInformationMessage("Hello World from cvscode-core!")})),n=o.commands.registerCommand("cvscode-core.createProject",(async()=>{const e=await o.window.showInputBox({prompt:"Enter project name (e.g., my-extension)",placeHolder:"my-extension"});if(!e)return;const r=o.workspace.workspaceFolders?.[0];if(!r)return void o.window.showErrorMessage("No workspace folder found.");const n=t.join(r.uri.fsPath,e);if(s.existsSync(n))return void o.window.showErrorMessage(`The directory "${e}" already exists.`);s.mkdirSync(n);const i={name:e,version:await o.window.showInputBox({prompt:"Enter version",placeHolder:"0.1.0"}),description:await o.window.showInputBox({prompt:"Enter description",placeHolder:"A new VSCode extension"})},c=t.join(n,"package.json");s.writeFileSync(c,JSON.stringify(i,null,2));const a=t.join(n,"src");s.mkdirSync(a);const d=t.join(a,"main.cvs");s.writeFileSync(d,""),o.window.showInformationMessage(`Created a new VSCode extension project at ${n}`)}));e.subscriptions.push(r,n)},e.deactivate=function(){}})(),module.exports=n})();